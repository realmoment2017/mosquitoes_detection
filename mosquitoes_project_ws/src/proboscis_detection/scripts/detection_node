#!/usr/bin/env python
from __future__ import print_function

import roslib
#roslib.load_manifest('my_package')
import sys
import rospy
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from rospy.numpy_msg import numpy_msg
import numpy as np
from matplotlib import pyplot as plt
import time as t
from settings import *
from detection_code import *
from proboscis_monitor_once import *
from proboscis_detection.msg import proboscis_info

class image_converter:

    def __init__(self):
#    self.image_pub = rospy.Publisher("image_topic_2",Image)
      self.pub = rospy.Publisher('prob_info', numpy_msg(proboscis_info), queue_size=10)
      self.bridge = CvBridge()
      self.image_sub = rospy.Subscriber("/cv_camera/image_raw",Image,self.callback)

    def callback(self,data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)
        proboscis_coords_trans = list()
        bb_list_trans = list()
        proboscis_coords, proboscis_orients, bb_list, cimg = proboscis_monitor_once(cv_image)
        assert len(proboscis_coords)==len(bb_list)
        if proboscis_coords is not None:
            for index in range(len(proboscis_coords)):
                proboscis_coords_trans.append(proboscis_coords[index][0])
                proboscis_coords_trans.append(proboscis_coords[index][1]) 
                bb_list_trans.append(bb_list[index][0])
                bb_list_trans.append(bb_list[index][1])
                bb_list_trans.append(bb_list[index][2])
                bb_list_trans.append(bb_list[index][3])
                if proboscis_orients[index]<-np.pi:
                    proboscis_orients[index] += 2*np.pi
            proboscis_coords_trans = np.array(proboscis_coords_trans, dtype=np.int32)
            proboscis_orients_trans = np.array(proboscis_orients, dtype=np.float32)
            bb_list_trans = np.array(bb_list_trans, dtype=np.int32)
            info = proboscis_info()
            info.positions = proboscis_coords_trans
            info.orientations = proboscis_orients_trans
            info.bounding_boxes = bb_list_trans
            #print("1*****", info.positions)
            #print("2*****", info.orientations)
            #print("3*****", info.bounding_boxes, len(info.bounding_boxes))
            rospy.loginfo(info.positions)
            rospy.loginfo(info.orientations)
            rospy.loginfo(info.bounding_boxes)
            self.pub.publish(info)

        #cv2.imshow("Image window", cv_image)
        cv2.waitKey(3)

#    try:
#      self.image_pub.publish(self.bridge.cv2_to_imgmsg(cv_image, "bgr8"))
#    except CvBridgeError as e:
#      print(e)

def main(args):
    ic = image_converter()
    rospy.init_node('detection_node', anonymous=True)
    rate = rospy.Rate(20) # 10hz
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
