// Generated by gencpp from file proboscis_detection/proboscis_info.msg
// DO NOT EDIT!


#ifndef PROBOSCIS_DETECTION_MESSAGE_PROBOSCIS_INFO_H
#define PROBOSCIS_DETECTION_MESSAGE_PROBOSCIS_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace proboscis_detection
{
template <class ContainerAllocator>
struct proboscis_info_
{
  typedef proboscis_info_<ContainerAllocator> Type;

  proboscis_info_()
    : positions()
    , orientations()
    , bounding_boxes()  {
    }
  proboscis_info_(const ContainerAllocator& _alloc)
    : positions(_alloc)
    , orientations(_alloc)
    , bounding_boxes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _positions_type;
  _positions_type positions;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _orientations_type;
  _orientations_type orientations;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _bounding_boxes_type;
  _bounding_boxes_type bounding_boxes;





  typedef boost::shared_ptr< ::proboscis_detection::proboscis_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::proboscis_detection::proboscis_info_<ContainerAllocator> const> ConstPtr;

}; // struct proboscis_info_

typedef ::proboscis_detection::proboscis_info_<std::allocator<void> > proboscis_info;

typedef boost::shared_ptr< ::proboscis_detection::proboscis_info > proboscis_infoPtr;
typedef boost::shared_ptr< ::proboscis_detection::proboscis_info const> proboscis_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::proboscis_detection::proboscis_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::proboscis_detection::proboscis_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace proboscis_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'proboscis_detection': ['/home/administer/mosquitoes_project_ws/src/proboscis_detection/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::proboscis_detection::proboscis_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::proboscis_detection::proboscis_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::proboscis_detection::proboscis_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::proboscis_detection::proboscis_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proboscis_detection::proboscis_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::proboscis_detection::proboscis_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::proboscis_detection::proboscis_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4eceeeb62787b55dec9faa253821d942";
  }

  static const char* value(const ::proboscis_detection::proboscis_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4eceeeb62787b55dULL;
  static const uint64_t static_value2 = 0xec9faa253821d942ULL;
};

template<class ContainerAllocator>
struct DataType< ::proboscis_detection::proboscis_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "proboscis_detection/proboscis_info";
  }

  static const char* value(const ::proboscis_detection::proboscis_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::proboscis_detection::proboscis_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] positions\n\
float32[] orientations\n\
int32[] bounding_boxes\n\
";
  }

  static const char* value(const ::proboscis_detection::proboscis_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::proboscis_detection::proboscis_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.positions);
      stream.next(m.orientations);
      stream.next(m.bounding_boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct proboscis_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::proboscis_detection::proboscis_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::proboscis_detection::proboscis_info_<ContainerAllocator>& v)
  {
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "orientations[]" << std::endl;
    for (size_t i = 0; i < v.orientations.size(); ++i)
    {
      s << indent << "  orientations[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.orientations[i]);
    }
    s << indent << "bounding_boxes[]" << std::endl;
    for (size_t i = 0; i < v.bounding_boxes.size(); ++i)
    {
      s << indent << "  bounding_boxes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.bounding_boxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROBOSCIS_DETECTION_MESSAGE_PROBOSCIS_INFO_H
